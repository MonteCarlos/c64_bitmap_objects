SYMBOLS {
    #__LOADADDR__:  type = import;
    #__EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0400; # 2k stack
}

MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $07FF, size = $0002;
    HEADER:   file = %O,               start = $0801, size = $000C;
    LORAM: file = "", define = yes, start = $0340, size = $04c0;
    MAIN:      file = %O, define = yes, start = $080D, size = $97F3 - __STACKSIZE__;
}

SEGMENTS {
    #
    #below $1000
    #
    LOADADDR: 	load = LOADADDR, type = ro, define = yes;
    EXEHDR:   	load = HEADER,   type = ro, define = yes;
	#SCREEN:		load = LORAM, start = $0400, type = bss, optional = yes, define = yes;
    ZPSAVE:   	load = LORAM,      type = bss, optional = yes, define = yes;
    #STARTUP:  	load = MAIN,      type = ro;
    LOWCODE:  	load = MAIN,      type = ro,   optional = yes;


    RODATA:   	load = MAIN,   type = ro;

    DISPLAYER:  load = MAIN, type = rw;
    SETTINGS:   load = MAIN, type = ro;
    #MUSIC:		load = MAIN, start = $1000, type = ro;
    #SPRITES:    load = MAIN, start =$2c00, type = ro, define = yes;
    #BGSPRITES:    load = MAIN, start =$2c00, type = ro, define = yes;
    #CHARSETS:   load = MAIN, start=$3000, type = ro, define = yes;
    #GHOSTBYTE:  load = MAIN, start = $3fff, type = ro, define = yes;
    #ALIGNEDCODE: load = MAIN, align = $100, type = rw, define = yes, optional = yes;
    ONCE:   	load = MAIN, type = ro;
    INIT:     	load = MAIN,      type = ro,  define = yes, optional = yes;
    CODE:     	load = MAIN, start = $900,     type = rw, define = yes;
    DATA:     	load = MAIN,      type = rw;

    BSS:      	load = MAIN,      type = bss, define = yes;
    ZEROPAGE: 	load = ZP,       type = zp;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
